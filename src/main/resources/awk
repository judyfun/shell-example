
[sdk@sdk-server shell]$ cat test.data 
2 A
1 B
4 A
6 D
7 C
3 A
7 C

##统计 A B C D  出现的个数
[sdk@sdk-server shell]$ cat test.data | awk '{arr[$2]+=1} END {for (key in arr) print key,arr[key]}'
A 3
B 1
C 2
D 1

## 统计 A B C D 分组后第一列累加的值
[sdk@sdk-server shell]$ cat test.data | awk '{arr[$2]+=$1} END {for (key in arr) print key,arr[key]}'
A 9
B 1
C 14
D 6

在awk初始的时候，定义了一个数组，数组的key就是要统计的那一列的值，如果统计个数，就累加1，如果要是分组统计求和，就累加其他列的值，
然后遍历完所有的数据后，在END语句中，循环出整个数组即可for (key in arr) 读取数组的所有下标，即i分别等于A、B、C、D循环赋值

###############
查找class2.dat 中第一列在class1.dat第一列能找到，但是class2.dat 第二列在class1.dat第二列找不到的数据
ARGIND 代表awk读取的文件列表序号
###############
[sdk@sdk-server shell]$ cat class1.dat 
lily 89
jack 74
leon 65
marthron 77
david 81
rose 90
[sdk@sdk-server shell]$ cat class2.dat 
mat 34
lily 55
jack 90
leon 65
rose 81
marthron 88
david 81
[sdk@sdk-server shell]$ awk  '{if(ARGIND==1) {name1[$1];score1[$2];arr1[$1]=$0} else if (ARGIND==2) {if  (($1 in name1)&&!($2 in score1)) {print "class2->"$0", class1->"arr1[$1] }}}' class1.dat class2.dat 
class2->lily 55, class1->lily 89
class2->marthron 88, class1->marthron 77

#################### TODO awk 内置函数
gsub(r,s)    在整个$0中用s替代r
gsub(r,s,t)    在整个t中用s替代r
####################


awk 多个分隔符
[root@iZt4n84n0ye9cc7t67vyswZ shell]#  echo "width:720 height:360" | awk '{print $1;print $2}' | awk -F: '{print $2}'
720
360
[root@iZt4n84n0ye9cc7t67vyswZ shell]# echo "width:720 height:360" | awk -F'[ :]' '{print $2,$4}'
720 360

不过，一般像下面这样写，多一个加号表明将连续出现的记录分隔符当做一个来处理，可以尝试在height前面再增加一个空格

[root@iZt4n84n0ye9cc7t67vyswZ shell]# echo "width:720  height:360" | awk -F'[ :]' '{print $2,$4}'
720 height
[root@iZt4n84n0ye9cc7t67vyswZ shell]# echo "width:720  height:360" | awk -F'[ :]+' '{print $2,$4}'
720 360
